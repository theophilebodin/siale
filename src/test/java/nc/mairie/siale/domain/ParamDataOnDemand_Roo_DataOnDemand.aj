// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nc.mairie.siale.domain.Param;
import nc.mairie.siale.domain.ParamDataOnDemand;
import nc.mairie.siale.domain.TypeParam;
import nc.mairie.siale.domain.TypeParamDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParamDataOnDemand: @Component;
    
    private Random ParamDataOnDemand.rnd = new SecureRandom();
    
    private List<Param> ParamDataOnDemand.data;
    
    @Autowired
    private TypeParamDataOnDemand ParamDataOnDemand.typeParamDataOnDemand;
    
    public Param ParamDataOnDemand.getNewTransientParam(int index) {
        Param obj = new Param();
        setActif(obj, index);
        setNom(obj, index);
        setTypeParam(obj, index);
        return obj;
    }
    
    public void ParamDataOnDemand.setActif(Param obj, int index) {
        Boolean actif = Boolean.TRUE;
        obj.setActif(actif);
    }
    
    public void ParamDataOnDemand.setNom(Param obj, int index) {
        String nom = "nom_" + index;
        if (nom.length() > 100) {
            nom = nom.substring(0, 100);
        }
        obj.setNom(nom);
    }
    
    public void ParamDataOnDemand.setTypeParam(Param obj, int index) {
        TypeParam typeParam = typeParamDataOnDemand.getRandomTypeParam();
        obj.setTypeParam(typeParam);
    }
    
    public Param ParamDataOnDemand.getSpecificParam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Param obj = data.get(index);
        Long id = obj.getId();
        return Param.findParam(id);
    }
    
    public Param ParamDataOnDemand.getRandomParam() {
        init();
        Param obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Param.findParam(id);
    }
    
    public boolean ParamDataOnDemand.modifyParam(Param obj) {
        return false;
    }
    
    public void ParamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Param.findParamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Param' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Param>();
        for (int i = 0; i < 10; i++) {
            Param obj = getNewTransientParam(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
