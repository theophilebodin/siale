// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nc.mairie.siale.domain.NoteCritere;
import nc.mairie.siale.domain.NoteCritereDataOnDemand;
import nc.mairie.siale.domain.NoteGroupe;
import nc.mairie.siale.domain.NoteGroupeDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NoteCritereDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NoteCritereDataOnDemand: @Component;
    
    private Random NoteCritereDataOnDemand.rnd = new SecureRandom();
    
    private List<NoteCritere> NoteCritereDataOnDemand.data;
    
    @Autowired
    private NoteGroupeDataOnDemand NoteCritereDataOnDemand.noteGroupeDataOnDemand;
    
    public NoteCritere NoteCritereDataOnDemand.getNewTransientNoteCritere(int index) {
        NoteCritere obj = new NoteCritere();
        setNom(obj, index);
        setNoteGroupe(obj, index);
        setPonderation(obj, index);
        return obj;
    }
    
    public void NoteCritereDataOnDemand.setNom(NoteCritere obj, int index) {
        String nom = "nom_" + index;
        obj.setNom(nom);
    }
    
    public void NoteCritereDataOnDemand.setNoteGroupe(NoteCritere obj, int index) {
        NoteGroupe noteGroupe = noteGroupeDataOnDemand.getRandomNoteGroupe();
        obj.setNoteGroupe(noteGroupe);
    }
    
    public void NoteCritereDataOnDemand.setPonderation(NoteCritere obj, int index) {
        double ponderation = new Integer(index).doubleValue();
        obj.setPonderation(ponderation);
    }
    
    public NoteCritere NoteCritereDataOnDemand.getSpecificNoteCritere(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        NoteCritere obj = data.get(index);
        Long id = obj.getId();
        return NoteCritere.findNoteCritere(id);
    }
    
    public NoteCritere NoteCritereDataOnDemand.getRandomNoteCritere() {
        init();
        NoteCritere obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return NoteCritere.findNoteCritere(id);
    }
    
    public boolean NoteCritereDataOnDemand.modifyNoteCritere(NoteCritere obj) {
        return false;
    }
    
    public void NoteCritereDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = NoteCritere.findNoteCritereEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'NoteCritere' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<NoteCritere>();
        for (int i = 0; i < 10; i++) {
            NoteCritere obj = getNewTransientNoteCritere(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
