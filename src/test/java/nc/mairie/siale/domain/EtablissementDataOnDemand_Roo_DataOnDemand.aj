// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nc.mairie.siale.domain.Etablissement;
import nc.mairie.siale.domain.EtablissementDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect EtablissementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EtablissementDataOnDemand: @Component;
    
    private Random EtablissementDataOnDemand.rnd = new SecureRandom();
    
    private List<Etablissement> EtablissementDataOnDemand.data;
    
    public Etablissement EtablissementDataOnDemand.getNewTransientEtablissement(int index) {
        Etablissement obj = new Etablissement();
        setAdresse(obj, index);
        setCode(obj, index);
        setContact(obj, index);
        setLibelle(obj, index);
        return obj;
    }
    
    public void EtablissementDataOnDemand.setAdresse(Etablissement obj, int index) {
        String adresse = "adresse_" + index;
        obj.setAdresse(adresse);
    }
    
    public void EtablissementDataOnDemand.setCode(Etablissement obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void EtablissementDataOnDemand.setContact(Etablissement obj, int index) {
        String contact = "contact_" + index;
        obj.setContact(contact);
    }
    
    public void EtablissementDataOnDemand.setLibelle(Etablissement obj, int index) {
        String libelle = "libelle_" + index;
        obj.setLibelle(libelle);
    }
    
    public Etablissement EtablissementDataOnDemand.getSpecificEtablissement(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Etablissement obj = data.get(index);
        Long id = obj.getId();
        return Etablissement.findEtablissement(id);
    }
    
    public Etablissement EtablissementDataOnDemand.getRandomEtablissement() {
        init();
        Etablissement obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Etablissement.findEtablissement(id);
    }
    
    public boolean EtablissementDataOnDemand.modifyEtablissement(Etablissement obj) {
        return false;
    }
    
    public void EtablissementDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Etablissement.findEtablissementEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Etablissement' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Etablissement>();
        for (int i = 0; i < 10; i++) {
            Etablissement obj = getNewTransientEtablissement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
