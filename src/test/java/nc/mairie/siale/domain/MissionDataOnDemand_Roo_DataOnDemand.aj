// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nc.mairie.siale.domain.BaremeDataOnDemand;
import nc.mairie.siale.domain.EtablissementDataOnDemand;
import nc.mairie.siale.domain.Mission;
import nc.mairie.siale.domain.MissionActionDataOnDemand;
import nc.mairie.siale.domain.MissionDataOnDemand;
import nc.mairie.siale.domain.ParamDataOnDemand;
import nc.mairie.siale.technique.TypeEtablissement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MissionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MissionDataOnDemand: @Component;
    
    private Random MissionDataOnDemand.rnd = new SecureRandom();
    
    private List<Mission> MissionDataOnDemand.data;
    
    @Autowired
    private BaremeDataOnDemand MissionDataOnDemand.baremeDataOnDemand;
    
    @Autowired
    private EtablissementDataOnDemand MissionDataOnDemand.etablissementDataOnDemand;
    
    @Autowired
    private MissionActionDataOnDemand MissionDataOnDemand.missionActionDataOnDemand;
    
    @Autowired
    private ParamDataOnDemand MissionDataOnDemand.paramDataOnDemand;
    
    public Mission MissionDataOnDemand.getNewTransientMission(int index) {
        Mission obj = new Mission();
        setCloturee(obj, index);
        setDateIntervention(obj, index);
        setDateNotation(obj, index);
        setDatePrevue(obj, index);
        setDureePrevueRDV(obj, index);
        setEtablissementNonDeclare(obj, index);
        setObservation(obj, index);
        setPrelevement_mediocre(obj, index);
        setPrelevement_nb(obj, index);
        setPrelevement_non_satisfaisant(obj, index);
        setPrelevement_satisfaisant(obj, index);
        setProjet(obj, index);
        setTypeEtablissement(obj, index);
        return obj;
    }
    
    public void MissionDataOnDemand.setCloturee(Mission obj, int index) {
        Boolean cloturee = Boolean.TRUE;
        obj.setCloturee(cloturee);
    }
    
    public void MissionDataOnDemand.setDateIntervention(Mission obj, int index) {
        Date dateIntervention = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateIntervention(dateIntervention);
    }
    
    public void MissionDataOnDemand.setDateNotation(Mission obj, int index) {
        Date dateNotation = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateNotation(dateNotation);
    }
    
    public void MissionDataOnDemand.setDatePrevue(Mission obj, int index) {
        Date datePrevue = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDatePrevue(datePrevue);
    }
    
    public void MissionDataOnDemand.setDureePrevueRDV(Mission obj, int index) {
        Date dureePrevueRDV = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDureePrevueRDV(dureePrevueRDV);
    }
    
    public void MissionDataOnDemand.setEtablissementNonDeclare(Mission obj, int index) {
        String etablissementNonDeclare = "etablissementNonDeclare_" + index;
        obj.setEtablissementNonDeclare(etablissementNonDeclare);
    }
    
    public void MissionDataOnDemand.setObservation(Mission obj, int index) {
        String observation = "observation_" + index;
        if (observation.length() > 1000) {
            observation = observation.substring(0, 1000);
        }
        obj.setObservation(observation);
    }
    
    public void MissionDataOnDemand.setPrelevement_mediocre(Mission obj, int index) {
        int prelevement_mediocre = index;
        obj.setPrelevement_mediocre(prelevement_mediocre);
    }
    
    public void MissionDataOnDemand.setPrelevement_nb(Mission obj, int index) {
        int prelevement_nb = index;
        obj.setPrelevement_nb(prelevement_nb);
    }
    
    public void MissionDataOnDemand.setPrelevement_non_satisfaisant(Mission obj, int index) {
        int prelevement_non_satisfaisant = index;
        obj.setPrelevement_non_satisfaisant(prelevement_non_satisfaisant);
    }
    
    public void MissionDataOnDemand.setPrelevement_satisfaisant(Mission obj, int index) {
        int prelevement_satisfaisant = index;
        obj.setPrelevement_satisfaisant(prelevement_satisfaisant);
    }
    
    public void MissionDataOnDemand.setProjet(Mission obj, int index) {
        String projet = "projet_" + index;
        obj.setProjet(projet);
    }
    
    public void MissionDataOnDemand.setTypeEtablissement(Mission obj, int index) {
        TypeEtablissement typeEtablissement = null;
        obj.setTypeEtablissement(typeEtablissement);
    }
    
    public Mission MissionDataOnDemand.getSpecificMission(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Mission obj = data.get(index);
        Long id = obj.getId();
        return Mission.findMission(id);
    }
    
    public Mission MissionDataOnDemand.getRandomMission() {
        init();
        Mission obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Mission.findMission(id);
    }
    
    public boolean MissionDataOnDemand.modifyMission(Mission obj) {
        return false;
    }
    
    public void MissionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Mission.findMissionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Mission' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Mission>();
        for (int i = 0; i < 10; i++) {
            Mission obj = getNewTransientMission(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
