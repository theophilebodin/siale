// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.domain;

import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import nc.mairie.siale.domain.ControleurSIALE;
import nc.mairie.siale.domain.Droit;

privileged aspect ControleurSIALE_Roo_Finder {
    
    public static TypedQuery<ControleurSIALE> ControleurSIALE.findControleurSIALEsByActifNotAndDroits(boolean actif, Set<Droit> droits) {
        if (droits == null) throw new IllegalArgumentException("The droits argument is required");
        EntityManager em = ControleurSIALE.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ControleurSIALE AS o WHERE o.actif IS NOT :actif  AND");
        for (int i = 0; i < droits.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :droits_item").append(i).append(" MEMBER OF o.droits");
        }
        TypedQuery<ControleurSIALE> q = em.createQuery(queryBuilder.toString(), ControleurSIALE.class);
        q.setParameter("actif", actif);
        int droitsIndex = 0;
        for (Droit _droit: droits) {
            q.setParameter("droits_item" + droitsIndex++, _droit);
        }
        return q;
    }
    
    public static TypedQuery<ControleurSIALE> ControleurSIALE.findControleurSIALEsByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = ControleurSIALE.entityManager();
        TypedQuery<ControleurSIALE> q = em.createQuery("SELECT o FROM ControleurSIALE AS o WHERE o.username = :username", ControleurSIALE.class);
        q.setParameter("username", username);
        return q;
    }
    
}
