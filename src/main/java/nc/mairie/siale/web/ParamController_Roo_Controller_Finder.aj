// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.mairie.siale.web;

import nc.mairie.siale.domain.Param;
import nc.mairie.siale.domain.TypeParam;
import nc.mairie.siale.web.ParamController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ParamController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByNomLike", "form" }, method = RequestMethod.GET)
    public String ParamController.findParamsByNomLikeForm(Model uiModel) {
        return "params/findParamsByNomLike";
    }
    
    @RequestMapping(params = "find=ByNomLike", method = RequestMethod.GET)
    public String ParamController.findParamsByNomLike(@RequestParam("nom") String nom, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("params", Param.findParamsByNomLike(nom, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Param.countFindParamsByNomLike(nom) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("params", Param.findParamsByNomLike(nom, sortFieldName, sortOrder).getResultList());
        }
        return "params/list";
    }
    
    @RequestMapping(params = { "find=ByTypeParam", "form" }, method = RequestMethod.GET)
    public String ParamController.findParamsByTypeParamForm(Model uiModel) {
        uiModel.addAttribute("typeparams", TypeParam.findAllTypeParams());
        return "params/findParamsByTypeParam";
    }
    
    @RequestMapping(params = "find=ByTypeParam", method = RequestMethod.GET)
    public String ParamController.findParamsByTypeParam(@RequestParam("typeParam") TypeParam typeParam, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("params", Param.findParamsByTypeParam(typeParam, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Param.countFindParamsByTypeParam(typeParam) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("params", Param.findParamsByTypeParam(typeParam, sortFieldName, sortOrder).getResultList());
        }
        return "params/list";
    }
    
}
